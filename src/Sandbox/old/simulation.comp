#version 450

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// POSITIVE CHARGE - +1
// NEGATIVE CHARGE - -1

struct Particle {
    vec3 position;
    vec3 velocity;
	vec3 acceleration;
    float charge;
    int stationary;
};

struct halo_result {
    float strength;
    float charge;
};

layout (binding = 0) restrict readonly buffer ReadOnlyParticles {
    Particle particles[];
} src;

layout (binding = 1) restrict writeonly buffer WriteOnlyParticles {
    Particle particles[];
} dst;

layout (binding = 2, rgba32f) uniform image2D Output;

layout (push_constant) uniform pushblock {
    float time_step;
    float z_slice;
    float coloumb_constant;
    float charge;
    vec2 view_box_min;
    vec2 view_box_max;
    int store_result;
    int show_directional_ef;
} param;

vec3 ComputeElectricField(vec3 point) {
    vec3 electric_field = vec3(0.0);
	for (int j = 0; j < src.particles.length(); j++) {
		Particle test_particle = src.particles[j];
		vec3 ray = point - test_particle.position;
		float distance_squared = dot(ray, ray);
		// avoid divide by 0
		if (distance_squared < 1e-6)
			continue;
		float distance_cubed = distance_squared * sqrt(distance_squared);
		electric_field += param.coloumb_constant * param.charge * (test_particle.charge) * ray / (distance_cubed);
	}
	return electric_field;
}

void Simulate() {
	for (int i = 0; i < src.particles.length(); i++) {
		Particle current_particle = src.particles[i];
		if(current_particle.stationary == 0) {
            vec3 electric_field = ComputeElectricField(current_particle.position);
            vec3 force = -1.0 * param.charge * electric_field;
            vec3 position = clamp(current_particle.position + src.particles[i].velocity * param.time_step, vec3(param.view_box_min, -5.0), vec3(param.view_box_max, 5.0));
            dst.particles[i].acceleration += force;
            dst.particles[i].velocity += src.particles[i].acceleration * param.time_step;
            dst.particles[i].position = position;
		    dst.particles[i].charge = current_particle.charge;
        }
	}
}

halo_result GetParticleHalo(vec3 point, float distance_threshold) {
	halo_result result;
    result.strength = 1e10;   
	for (int i = 0; i < src.particles.length(); i++) {
        Particle item = src.particles[i];
		float d = distance(point, item.position);
		if (d < distance_threshold) {
			if (d < result.strength) {
				result.strength = d;
                result.charge = item.charge;
			}
		}
	}
	if (result.strength < distance_threshold) {
		result.strength = 1.0 - result.strength / distance_threshold;
        return result;
    }
	else {
        halo_result empty;
        empty.strength = 0;
        return empty;
    }
}

vec3 GetPixelColor(ivec2 image_size, ivec2 xy) {
    vec2 r_xy = vec2(xy) / vec2(image_size);
    vec2 lerp_xy = (1.0 - r_xy) * param.view_box_min + r_xy * param.view_box_max;
    vec3 point = vec3(lerp_xy, param.z_slice);
    vec3 electric_field = ComputeElectricField(point);

    float magnitude = length(electric_field);
    float colorization = 1.0 + (log(magnitude)/7.42714);

    halo_result halo = GetParticleHalo(point, 2.0);
    vec3 color = vec3(
        halo.charge == +1 ? 1.0 : 0.0,
        halo.charge == -1 ? 1.0 : 0.0,
        1.0
    );
    // return param.show_directional_ef == 1 ? (electric_field + vec3(1.0)) / 2.0 : color * colorization;
    return param.show_directional_ef == 1 ? abs(electric_field) : color * colorization;
}

void main()
{
    ivec2 size = imageSize(Output);
    ivec2 xy = ivec2(gl_GlobalInvocationID.xy);
    if(any(greaterThanEqual(xy, size)))
        return;

    if(param.store_result == 1)
        Simulate();
    vec4 out_color = vec4(GetPixelColor(size, xy), 1.0);

    imageStore(Output, xy, out_color);
}
