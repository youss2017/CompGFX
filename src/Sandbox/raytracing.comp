#version 450
#extension GL_EXT_scalar_block_layout : enable

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (constant_id = 0) const int MaxBounceCount = 30;
layout (constant_id = 1) const int RaysPerPixel = 10;

layout(binding = 0, rgba32f) uniform image2D OutputImage;
layout(scalar, binding = 1) uniform Parameters {
    mat3 ViewMatrix;
    vec3 CameraPosition;
    uint Counter;
    uint RngState;
};

struct Ray {
    vec3 origin;
    vec3 dir;
};

struct RayTracingMaterial {
    vec4 color;
    vec3 emissionColor;
    float emissionStrength;
};

struct HitInfo {
    bool didHit;
    float dst;
    vec3 hitPoint;
    vec3 normal;
    RayTracingMaterial material;
};

struct Sphere {
    vec3 position;
    float radius;
    RayTracingMaterial material;
};

layout(binding = 2) readonly buffer Spheres {
    Sphere spheres[];
};

HitInfo RaySphere(Ray ray, vec3 sphereCenter, float sphereRadius) {
    HitInfo hitInfo;
    hitInfo.didHit = false;

    vec3 offsetRayOrigin = ray.origin - sphereCenter;
    float a = dot(ray.dir, ray.dir);
    float b = 2 * dot(offsetRayOrigin, ray.dir);
    float c = dot(offsetRayOrigin, offsetRayOrigin) - sphereRadius * sphereRadius;
    float discriminant = b * b - 4 * a * c;
    if(discriminant >= 0) {
        float dst = (-b - sqrt(discriminant)) / (2 * a);
        if(dst >= 0) {
            hitInfo.didHit = true;
            hitInfo.dst = dst;
            hitInfo.hitPoint = ray.origin + ray.dir * dst;
            hitInfo.normal = normalize(hitInfo.hitPoint - sphereCenter);
        }
    }
    return hitInfo;
}

HitInfo CalculateRayCollisions(Ray ray) {
    HitInfo closestHit;
    closestHit.didHit = false;
    closestHit.dst = 1e+9;
    for(int i = 0; i < spheres.length(); i++) {
        Sphere sphere = spheres[i];
        HitInfo hitInfo = RaySphere(ray, sphere.position, sphere.radius);
        if(hitInfo.didHit && hitInfo.dst < closestHit.dst) {
            closestHit = hitInfo;
            closestHit.material = sphere.material;
        }
    }
    return closestHit;
}

float RandomValue(inout uint state) {
    state = state * 747796405 + 2891336453;
    uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
    result = (result >> 22) ^ result;
    return result / 4294967295.0;
}

float RandomValueNormalDistribution(inout uint state) {
    float theta = 2.0 * 3.1515926 * RandomValue(state);
    float rho = sqrt(-2.0 * log(RandomValue(state)));
    return rho * cos(theta);
}

vec3 RandomDirection(inout uint state) {
    float x = RandomValueNormalDistribution(state);
    float y = RandomValueNormalDistribution(state);
    float z = RandomValueNormalDistribution(state);
    return normalize(vec3(x, y, z));
}

vec3 RandomHemisphereDirection(vec3 normal, inout uint rngState) {
    vec3 dir = RandomDirection(rngState);
    return dir * sign(dot(normal, dir));
}

vec3 Trace(Ray ray, inout uint rngState) {
    vec3 incomingLight = vec3(0.0);
    vec3 rayColor = vec3(1.0);

    for(int i = 0; i <= MaxBounceCount; i++) {
        HitInfo hitInfo = CalculateRayCollisions(ray);
        if(hitInfo.didHit) {
            ray.origin = hitInfo.hitPoint;
            ray.dir = normalize(hitInfo.normal + RandomDirection(rngState));

            RayTracingMaterial material = hitInfo.material;
            vec3 emittedLight = material.emissionColor * material.emissionStrength;
            incomingLight += emittedLight * rayColor;
            rayColor *= material.color.rgb;

        } else {
            break;
        }
    }

    return incomingLight;
}

void main() {
    ivec2 size = imageSize(OutputImage);
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if(coord.x >= size.x || coord.y >= size.y) return;
    uint rngState = (gl_GlobalInvocationID.y * size.x + gl_GlobalInvocationID.x) + Counter * 717393;

    Ray ray;
    ray.origin = CameraPosition;
    ray.dir = normalize(vec3((coord / vec2(size)) * 2.0 - 1.0, 1.0)) * mat3(ViewMatrix);

    vec3 totalIncomingLight = vec3(0.0);
    for(int i = 0; i < RaysPerPixel; i++) {
        totalIncomingLight += Trace(ray, rngState);
    }

    vec4 previousColor = imageLoad(OutputImage, coord);
    vec4 nextColor = vec4(totalIncomingLight / RaysPerPixel, 1.0);
    
    float weight = 1.0 / (Counter + 1);
    vec4 outColor = previousColor * (1 - weight) + nextColor * weight;

    imageStore(OutputImage, coord, outColor);
}
