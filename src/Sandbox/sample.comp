#version 450

layout (binding = 0, rgba8_snorm) uniform image2D inputImage;
layout (binding = 1, rgba8_snorm) uniform image2D outputImage;
layout (binding = 2, rgba8_snorm) uniform image2D previousInputImage;

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout (push_constant) uniform constants {
    int algorithim;
    float threshold;
    float rc;
    mat3 kernal;
};

float grayscale(vec4 x) {
    return sqrt(dot(x.rgb, x.rgb));
}

vec4 getPixel(ivec2 size, ivec2 coord) {
    coord.x = min(max(coord.x, 0), size.x - 1);
    coord.y = min(max(coord.y, 0), size.y - 1);
    return imageLoad(inputImage, coord);
}

void main()
{
    ivec2 size = imageSize(inputImage);
    if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    vec4 inputColor = imageLoad(inputImage, coord);
    
    float value = grayscale(inputColor);

    if(algorithim == 0) {
        // pass-through
        imageStore(outputImage, coord, inputColor);
    } else if(algorithim == 1) {
        // threshold
        if(value > threshold)
            imageStore(outputImage, coord, vec4(1.0));
        else
            imageStore(outputImage, coord, vec4(0.0));
    } else if(algorithim == 2) {
        vec4 prevInputColor = imageLoad(previousInputImage, coord);
        float prevValue = grayscale(prevInputColor);
        float motionalValue = abs(value - prevValue);
        imageStore(outputImage, coord, vec4(motionalValue, motionalValue, motionalValue, 1.0));
        // update previous frame here instead of doing a blit
        imageStore(previousInputImage, coord, inputColor);
    } else if(algorithim == 3) {
        vec4 outputColor = imageLoad(outputImage, coord);
        vec4 dPixel = inputColor - outputColor;
        dPixel *= rc;
        dPixel += outputColor;
        imageStore(outputImage, coord, vec4(vec3(dPixel), 1.0));
    } else if(algorithim == 4) {

        vec4 sum = vec4(0.0);
        for(int j = -1; j <= 1; j++) {
            for(int k = -1; k <= 1; k++) {
                sum += getPixel(size, coord + ivec2(k, j)) * kernal[k][j];
            }
        }
        imageStore(outputImage, coord, vec4(vec3(sum), 1.0));
    } else {
        imageStore(outputImage, coord, vec4(0.0, 0.0, 1.0, 1.0));
    }

}